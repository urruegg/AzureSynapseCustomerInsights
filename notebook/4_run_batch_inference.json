{
	"name": "4_run_batch_inference",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "db1261d6-0996-45c8-a784-7ccbd2a41023"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f39bf952-6a0c-4fac-bf30-0bf640da3752/resourceGroups/ursrueggcom/providers/Microsoft.Synapse/workspaces/ursrueggcomworkspace/bigDataPools/spark1",
				"name": "spark1",
				"type": "Spark",
				"endpoint": "https://ursrueggcomworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Copyright (c) Microsoft Corporation.\n",
					"\n",
					"Licensed under the MIT License."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Library Imports"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"data_lake_account_name = 'https://ursrueggcomdatalake.dfs.core.windows.net' # Synapse Workspace ADLS\n",
					"file_system_name = 'users/sourcedata'\n",
					"\n",
					"table_name = \"c360_data.preparedinferencedata\"\n",
					"\n",
					"#AML workspace details\n",
					"subscription_id = \"\" \n",
					"resource_group = \"\" \n",
					"workspace_name = \"\" \n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"import azureml.core\n",
					"#print(\"SDK Version:\", azureml.core.VERSION)\n",
					"from azureml.core.experiment import Experiment\n",
					"from azureml.core.workspace import Workspace\n",
					"from azureml.train.automl.run import AutoMLRun\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"from azureml.automl.runtime.onnx_convert import OnnxConverter\n",
					"from azureml.core.model import Model\n",
					"from azureml.core import Environment\n",
					"from azureml.core.model import InferenceConfig\n",
					"from azureml.core.webservice import AciWebservice\n",
					"from azureml.core.webservice import Webservice\n",
					"\n",
					"from azureml.core import Workspace\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Connect to AML Workspace "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"#save the model to a local file\n",
					"import azureml.core\n",
					"\n",
					"from azureml.core import Workspace\n",
					"ws = Workspace(workspace_name = workspace_name,\n",
					"               subscription_id = subscription_id,\n",
					"               resource_group = resource_group)\n",
					"ws.write_config()   \n",
					"\n",
					"from azureml.core.model import Model\n",
					"\n",
					"import joblib\n",
					"model_name='lease_renewal_model'\n",
					"model_path = Model.get_model_path(model_name=model_name, _workspace=ws)\n",
					"loaded_model = joblib.load(model_path)\n",
					"print('model loaded!')\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_str = \"SELECT cid ,pid ,uid ,InitialLeaseTerm ,(InitialLeaseTerm + ifnull((num_renewals * avg_renewal_leaseterm),0)) as TotalLeaseTerm,isRenewed, \\\n",
					"WO_AirConditioning ,WO_AirDuctsorVents ,WO_CabinetDoors ,WO_Cabinets ,WO_Carpet , \\\n",
					"WO_Ceiling ,WO_CeilingFan ,WO_CleanUnit ,WO_Cleaning ,WO_Dishwasher ,WO_DoorRepairorReplace ,WO_Doorbell , \\\n",
					"WO_Drain ,WO_Dryer ,WO_Faucet ,WO_FilterReplacement ,WO_GarageRemote ,WO_GarbageDisposal ,WO_Heating ,WO_LightBulbs , \\\n",
					"WO_LightFixture ,WO_LockorExteriorDoor ,WO_LockorInteriorDoor ,WO_Microwave ,WO_Other ,WO_Outlets ,WO_Paint ,WO_PestControl , \\\n",
					"WO_Refrigerator ,WO_ShelvesorDrawers ,WO_ShowerHead ,WO_Sink ,WO_SinkStopper ,WO_SmokeDetector ,WO_StoveorOven ,WO_Switches , \\\n",
					"WO_Thermostat ,WO_Toilet ,WO_TowelBar ,WO_TrashRemoval ,WO_TuborShower ,WO_UnderSink ,WO_Walls ,WO_Washer ,WO_Windows , \\\n",
					"Movein_Easeofprocess ,Movein_OverallSatisfaction ,Movein_StaffCommunication ,Movein_StaffCourtesy ,Movein_StaffProfessionalism , \\\n",
					"Renewal_ConditionofProperty,Renewal_MaintenanceOverallSatisfaction ,Renewal_ManagementCommunication ,Renewal_ManagementCourtesy , \\\n",
					"Renewal_ManagementProblemResolution ,Renewal_ManagementProfessionalism ,Renewal_OverallSatisfaction FROM \" + table_name +  \\\n",
					"\" where isMovedOut = 'N'\"\n",
					"\n",
					"df_test = spark.sql(sql_str)\n",
					"df_test_pd = df_test.toPandas()\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"#batch inferencing\n",
					"drop_cols = ['cid','pid','uid','isRenewed']\n",
					"df_test = df_test_pd.drop(drop_cols, axis=1)\n",
					"\n",
					"model_path = Model.get_model_path(model_name = 'lease_renewal_model')\n",
					"model = joblib.load(model_path)\n",
					"\n",
					"prediction = model.predict(df_test)\n",
					"predit_proba = model.predict_proba(df_test)\n",
					"\n",
					"df_result = df_test_pd[['cid','pid','uid']] \n",
					"df_result['prediction'] = prediction\n",
					"df_result['predict_proba'] = predit_proba[['Y']]\n",
					"\n",
					"df_sp = spark.createDataFrame(df_result)\n",
					"df_sp.write.option('header', 'true').mode('overwrite').csv(f'abfss://{file_system_name}@{data_lake_account_name}.dfs.core.windows.net/resident360/batchpredictions/')\n",
					"\n",
					"df_sp.write.mode(\"overwrite\").saveAsTable(\"c360_data.lease_renewal_predictions_temp\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_str = '''select CustomerId, min(prediction) as RenewalPrediction, round(min(predict_proba),4) * 100 as RenewalPredictionScore from c360_data.lease_renewal_predictions_temp as pred\n",
					"inner join c360_data.customer_profile_ids_combined as ids on pred.cid = ids.cid\n",
					"group by CustomerId'''\n",
					"\n",
					"df_pred = spark.sql(sql_str)\n",
					"df_pred.write.mode(\"overwrite\").saveAsTable(\"c360_data.lease_renewal_predictions\")\n",
					"df_pred.write.mode(\"overwrite\").saveAsTable(\"c360_data.lease_renewal_prediction\")\n",
					"spark.sql('drop table c360_data.lease_renewal_predictions_temp')"
				],
				"execution_count": 6
			}
		]
	}
}