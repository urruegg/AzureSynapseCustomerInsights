{
	"name": "2_train_model",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d1d65cec-9573-447f-9bac-cca5ee619381"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f39bf952-6a0c-4fac-bf30-0bf640da3752/resourceGroups/ursrueggcom/providers/Microsoft.Synapse/workspaces/ursrueggcomworkspace/bigDataPools/spark1",
				"name": "spark1",
				"type": "Spark",
				"endpoint": "https://ursrueggcomworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Copyright (c) Microsoft Corporation.\n",
					"\n",
					"Licensed under the MIT License."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Library Imports"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import azureml.core\n",
					"#print(\"SDK Version:\", azureml.core.VERSION)\n",
					"from azureml.core.experiment import Experiment\n",
					"from azureml.core.workspace import Workspace\n",
					"from azureml.train.automl.run import AutoMLRun\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"from azureml.automl.runtime.onnx_convert import OnnxConverter\n",
					"from azureml.core.model import Model\n",
					"from azureml.core import Environment\n",
					"from azureml.core.model import InferenceConfig\n",
					"from azureml.core.webservice import AciWebservice\n",
					"from azureml.core.webservice import Webservice"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read in Data from Azure Data Lake"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"data_lake_account_name = 'https://ursrueggcomdatalake.dfs.core.windows.net' # Synapse Workspace ADLS\n",
					"file_system_name = 'users/sourcedata'\n",
					"table_name = \"c360_data.prepareddata\"\n",
					"\n",
					"#AML workspace details\n",
					"subscription_id = \"f39bf952-6a0c-4fac-bf30-0bf640da3752\" \n",
					"resource_group = \"ursrueggcom\" \n",
					"workspace_name = \"ursrueggcommlworkspace\" "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.core import Workspace\n",
					"ws = Workspace(workspace_name = workspace_name,\n",
					"               subscription_id = subscription_id,\n",
					"               resource_group = resource_group)          "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql_str = sql_str = '''SELECT cid ,pid ,uid ,InitialLeaseTerm ,(InitialLeaseTerm + ifnull((num_renewals * avg_renewal_leaseterm),0)) as TotalLeaseTerm,isRenewed,\n",
					"WO_AirConditioning ,WO_AirDuctsorVents ,WO_CabinetDoors ,WO_Cabinets ,WO_Carpet ,\n",
					"WO_Ceiling ,WO_CeilingFan ,WO_CleanUnit ,WO_Cleaning ,WO_Dishwasher ,WO_DoorRepairorReplace ,WO_Doorbell ,\n",
					"WO_Drain ,WO_Dryer ,WO_Faucet ,WO_FilterReplacement ,WO_GarageRemote ,WO_GarbageDisposal ,WO_Heating ,WO_LightBulbs ,\n",
					"WO_LightFixture ,WO_LockorExteriorDoor ,WO_LockorInteriorDoor ,WO_Microwave ,WO_Other ,WO_Outlets ,WO_Paint ,WO_PestControl ,\n",
					"WO_Refrigerator ,WO_ShelvesorDrawers ,WO_ShowerHead ,WO_Sink ,WO_SinkStopper ,WO_SmokeDetector ,WO_StoveorOven ,WO_Switches ,\n",
					"WO_Thermostat ,WO_Toilet ,WO_TowelBar ,WO_TrashRemoval ,WO_TuborShower ,WO_UnderSink ,WO_Walls ,WO_Washer ,WO_Windows ,\n",
					"Movein_Easeofprocess ,Movein_OverallSatisfaction ,Movein_StaffCommunication ,Movein_StaffCourtesy ,Movein_StaffProfessionalism ,\n",
					"Renewal_ConditionofProperty ,Renewal_MaintenanceOverallSatisfaction ,Renewal_ManagementCommunication ,Renewal_ManagementCourtesy ,\n",
					"Renewal_ManagementProblemResolution ,Renewal_ManagementProfessionalism ,Renewal_OverallSatisfaction FROM c360_data.prepareddata\n",
					"where isMovedOut = \\'Y\\'\n",
					"'''\n",
					"df_train = spark.sql(sql_str)\n",
					"\n",
					"# fill null rows with 'N' for label \n",
					"df_train = df_train.na.fill(value='N', subset=['isRenewed'])\n",
					"\n",
					"df_train.groupby('isRenewed').count().show(5)\n",
					"\n",
					"df_train_pd = df_train.toPandas()\n",
					"drop_cols = ['cid', 'pid', 'uid']\n",
					"df_train_pd = df_train_pd.drop(drop_cols, axis=1)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azureml.core.experiment import Experiment\n",
					"from azureml.train.automl.run import AutoMLRun\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"\n",
					"##run only once\n",
					"experimentname = 'Lease-Renewal-Experiment'\n",
					"experiment = Experiment(ws, experimentname)\n",
					"\n",
					"automl_classifier_config = AutoMLConfig(\n",
					"        task='classification', \n",
					"        enable_early_stopping = True,       \n",
					"        experiment_timeout_minutes=15,\n",
					"        iterations=2,\n",
					"        primary_metric='AUC_weighted',\n",
					"        training_data= df_train_pd,\n",
					"        #spark_context=sc,\n",
					"        #compute = 'local',\n",
					"        label_column_name='isRenewed',\n",
					"        n_cross_validations=5,\n",
					"        model_explainability=True,\n",
					"        enable_onnx_compatible_models=True,\n",
					"        enable_voting_ensemble=False,\n",
					"        enable_stack_ensemble=False\n",
					"        )\n",
					"local_run = experiment.submit(automl_classifier_config, show_output=False)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false,
						"source_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azureml.core.experiment import Experiment\n",
					"from azureml.core.workspace import Workspace\n",
					"from azureml.train.automl.run import AutoMLRun\n",
					"from azureml.train.automl import AutoMLConfig\n",
					"from azureml.core.model import Model\n",
					"import joblib\n",
					"\n",
					"# get experiment run, get the best model and register\n",
					"experimentname = 'Lease-Renewal-Experiment'\n",
					"\n",
					"for automl_run in ws.experiments[experimentname].get_runs():\n",
					"    best_run, fitted_model = automl_run.get_output()  # We are taking the first run. You can update this if you like to take a different run\n",
					"    break\n",
					"\n",
					"#save the model to a local file\n",
					"model_path = 'lease_renewal_model'\n",
					"joblib.dump(fitted_model, model_path)\n",
					"\n",
					"model_name = \"lease_renewal_model\"\n",
					"registered_model = Model.register(model_path = model_path, # this points to a local file\n",
					"                       model_name = model_name, # name the model is registered as\n",
					"                       tags = {'type': \"classification\"}, \n",
					"                       description = \"Lease Renewal Classifier\", \n",
					"                       workspace = ws)"
				]
			}
		]
	}
}